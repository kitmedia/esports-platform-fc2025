// EA SPORTS FC 2025 eSports Platform Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== AUTHENTICATION & USERS =====

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String   @unique
  displayName       String?
  avatar            String?
  bio               String?
  country           String?
  language          String   @default("en")
  timezone          String?
  
  // Authentication
  passwordHash      String?
  emailVerified     Boolean  @default(false)
  emailVerifiedAt   DateTime?
  twoFactorEnabled  Boolean  @default(false)
  twoFactorSecret   String?
  
  // OAuth Providers
  discordId         String?  @unique
  twitchId          String?  @unique
  eaConnectId       String?  @unique
  
  // Game Platforms
  platforms         UserPlatform[]
  
  // Profile Stats
  totalTournaments  Int      @default(0)
  totalWins         Int      @default(0)
  totalLosses       Int      @default(0)
  currentElo        Int      @default(1200)
  peakElo           Int      @default(1200)
  winRate           Float    @default(0.0)
  
  // Roles & Permissions
  role              UserRole @default(PLAYER)
  permissions       String[] // JSON array of permissions
  isActive          Boolean  @default(true)
  isBanned          Boolean  @default(false)
  banReason         String?
  banExpiresAt      DateTime?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastLoginAt       DateTime?
  
  // Relations
  organizedTournaments Tournament[] @relation("TournamentOrganizer")
  teamMemberships   TeamMember[]
  participations    TournamentParticipant[]
  matches           MatchParticipant[]
  matchResults      MatchResult[]
  notifications     UserNotification[]
  disputes          Dispute[]
  arbitrations      ArbitrationVote[]
  paymentMethods    PaymentMethod[]
  subscriptions     Subscription[]
  auditLogs         AuditLog[]
  streams           Stream[] @relation("StreamOrganizer")
  payments          Payment[] @relation("UserPayments")
  prizePayments     PrizePayment[] @relation("UserPrizes")
  stripeCustomerId  String?
  stripeAccountId   String?
  
  @@map("users")
}

model UserPlatform {
  id           String   @id @default(cuid())
  userId       String
  platform     Platform
  platformId   String   // Platform-specific user ID
  gamertag     String
  isVerified   Boolean  @default(false)
  isPrimary    Boolean  @default(false)
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, platform])
  @@map("user_platforms")
}

// ===== TEAMS =====

model Team {
  id           String   @id @default(cuid())
  name         String   @unique
  tag          String   @unique
  description  String?
  avatar       String?
  banner       String?
  isActive     Boolean  @default(true)
  
  // Stats
  totalTournaments Int   @default(0)
  totalWins        Int   @default(0)
  totalLosses      Int   @default(0)
  currentElo       Int   @default(1200)
  winRate          Float @default(0.0)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  members      TeamMember[]
  participations TournamentParticipant[]
  matches      MatchParticipant[]
  
  @@map("teams")
}

model TeamMember {
  id        String     @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole   @default(MEMBER)
  joinedAt  DateTime   @default(now())
  isActive  Boolean    @default(true)
  
  team      Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, userId])
  @@map("team_members")
}

// ===== TOURNAMENTS =====

model Tournament {
  id                String            @id @default(cuid())
  name              String
  description       String?
  rules             String?
  
  // Configuration
  format            TournamentFormat
  gameMode          GameMode
  maxParticipants   Int
  minParticipants   Int              @default(2)
  teamSize          Int              @default(1) // 1 for individual, 2+ for teams
  isTeamTournament  Boolean          @default(false)
  
  // Scheduling
  registrationStart DateTime
  registrationEnd   DateTime
  tournamentStart   DateTime
  tournamentEnd     DateTime?
  timezone          String           @default("UTC")
  
  // Status
  status            TournamentStatus @default(DRAFT)
  currentRound      Int              @default(0)
  
  // Entry & Prizes
  entryFee          Float            @default(0)
  prizePool         Float            @default(0)
  currency          String           @default("USD")
  prizes            Json             // JSON object with prize distribution
  
  // Visibility & Access
  isPublic          Boolean          @default(true)
  isVerified        Boolean          @default(false)
  requiresApproval  Boolean          @default(false)
  inviteCode        String?          @unique
  
  // Media
  banner            String?
  logo              String?
  stream            Json?            // Streaming configuration
  
  // AI Features
  aiGenerated       Boolean          @default(false)
  aiSuggestions     Json?            // AI optimization suggestions
  
  // Organizer
  organizerId       String
  organizer         User             @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relations
  participants      TournamentParticipant[]
  brackets          Bracket[]
  matches           Match[]
  notifications     TournamentNotification[]
  disputes          Dispute[]
  discordBot        DiscordBot?
  payments          Payment[] @relation("TournamentPayments")
  prizePayments     PrizePayment[] @relation("TournamentPrizes")
  
  @@map("tournaments")
}

model TournamentParticipant {
  id           String   @id @default(cuid())
  tournamentId String
  userId       String?
  teamId       String?
  
  // Status
  status       ParticipantStatus @default(REGISTERED)
  seed         Int?              // Seeding for brackets
  checkedInAt  DateTime?
  
  // Performance
  currentElo   Int      @default(1200)
  wins         Int      @default(0)
  losses       Int      @default(0)
  
  registeredAt DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team         Team?      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([tournamentId, userId])
  @@unique([tournamentId, teamId])
  @@map("tournament_participants")
}

// ===== BRACKETS & MATCHES =====

model Bracket {
  id           String        @id @default(cuid())
  tournamentId String
  name         String        // "Main", "Losers", "Group A", etc.
  type         BracketType   
  round        Int           @default(1)
  position     Int           @default(0)
  
  tournament   Tournament    @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  matches      Match[]
  
  @@map("brackets")
}

model Match {
  id           String   @id @default(cuid())
  tournamentId String
  bracketId    String?
  
  // Match Details
  round        Int
  position     Int              // Position within round
  matchNumber  String?          // Display number like "M1", "WF", "GF"
  
  // Scheduling
  scheduledAt  DateTime?
  startedAt    DateTime?
  completedAt  DateTime?
  
  // Status
  status       MatchStatus @default(PENDING)
  
  // Game Settings
  bestOfSeries Int         @default(1) // Best of 1, 3, 5, etc.
  currentGame  Int         @default(1)
  
  // Streaming
  streamUrl    String?
  recordingUrl String?
  
  // AI Validation
  autoValidated Boolean    @default(false)
  validationScore Float?   // AI confidence score
  
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  bracket      Bracket?   @relation(fields: [bracketId], references: [id], onDelete: SetNull)
  
  // Relations
  participants MatchParticipant[]
  results      MatchResult[]
  disputes     Dispute[]
  stream       Stream?
  
  @@map("matches")
}

model MatchParticipant {
  id       String  @id @default(cuid())
  matchId  String
  userId   String?
  teamId   String?
  side     Int     // 1 or 2 (home/away)
  
  // Connection
  isReady  Boolean @default(false)
  joinedAt DateTime?
  leftAt   DateTime?
  
  match    Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user     User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  team     Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([matchId, userId])
  @@unique([matchId, teamId])
  @@map("match_participants")
}

model MatchResult {
  id           String       @id @default(cuid())
  matchId      String
  submittedBy  String       // User who submitted result
  
  // Score
  player1Score Int
  player2Score Int
  gameNumber   Int          @default(1)
  
  // Validation
  status       ResultStatus @default(PENDING)
  evidence     Json?        // Screenshots, codes, etc.
  validatedAt  DateTime?
  validatedBy  String?      // Admin/AI who validated
  
  // AI Analysis
  ocrData      Json?        // OCR extracted data
  confidence   Float?       // AI confidence score
  anomalies    String[]     // Detected anomalies
  
  submittedAt  DateTime     @default(now())
  
  match        Match        @relation(fields: [matchId], references: [id], onDelete: Cascade)
  submitter    User         @relation(fields: [submittedBy], references: [id])
  
  @@map("match_results")
}

// ===== DISPUTES & ARBITRATION =====

model Dispute {
  id           String      @id @default(cuid())
  tournamentId String
  matchId      String?
  reportedBy   String
  
  // Dispute Details
  category     DisputeCategory
  description  String
  evidence     Json?       // Screenshots, videos, etc.
  
  // Status
  status       DisputeStatus @default(OPEN)
  priority     DisputePriority @default(MEDIUM)
  
  // Resolution
  resolvedAt   DateTime?
  resolvedBy   String?     // Admin ID
  resolution   String?
  compensation Json?       // Prize adjustments, etc.
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  tournament   Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  match        Match?      @relation(fields: [matchId], references: [id], onDelete: Cascade)
  reporter     User        @relation(fields: [reportedBy], references: [id])
  
  // Arbitration votes
  votes        ArbitrationVote[]
  
  @@map("disputes")
}

model ArbitrationVote {
  id        String      @id @default(cuid())
  disputeId String
  arbiterId String
  vote      ArbitrationDecision
  reasoning String?
  confidence Float      @default(0.5) // 0-1 confidence in decision
  
  votedAt   DateTime    @default(now())
  
  dispute   Dispute     @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  arbiter   User        @relation(fields: [arbiterId], references: [id])
  
  @@unique([disputeId, arbiterId])
  @@map("arbitration_votes")
}

// ===== NOTIFICATIONS =====

model TournamentNotification {
  id           String   @id @default(cuid())
  tournamentId String
  type         NotificationType
  title        String
  message      String
  data         Json?    // Additional data
  
  // Targeting
  targetAll    Boolean  @default(false)
  targetRoles  String[] // Specific roles to notify
  
  sentAt       DateTime @default(now())
  
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  userNotifications UserNotification[]
  
  @@map("tournament_notifications")
}

model UserNotification {
  id             String   @id @default(cuid())
  userId         String
  notificationId String?
  
  // Content (for direct notifications)
  type           NotificationType?
  title          String?
  message        String?
  data           Json?
  
  // Status
  isRead         Boolean  @default(false)
  readAt         DateTime?
  
  createdAt      DateTime @default(now())
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification   TournamentNotification? @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  
  @@map("user_notifications")
}

// ===== PAYMENTS & SUBSCRIPTIONS =====

model PaymentMethod {
  id           String       @id @default(cuid())
  userId       String
  stripeId     String       @unique
  type         PaymentType
  last4        String?
  expiryMonth  Int?
  expiryYear   Int?
  isDefault    Boolean      @default(false)
  
  createdAt    DateTime     @default(now())
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payment_methods")
}

model Subscription {
  id           String           @id @default(cuid())
  userId       String
  plan         SubscriptionPlan
  stripeId     String           @unique
  status       SubscriptionStatus
  
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  canceledAt         DateTime?
  
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

// ===== STREAMING & MEDIA =====

model Stream {
  id           String       @id @default(cuid())
  matchId      String?      @unique
  organizerId  String
  title        String
  description  String?
  
  // Stream Details
  streamKey    String       @unique
  rtmpUrl      String?
  playbackUrl  String?
  status       StreamStatus @default(OFFLINE)
  
  // Configuration
  quality      String       @default("1080p")
  bitrate      Int          @default(5000)
  framerate    Int          @default(60)
  enableChat   Boolean      @default(true)
  isPublic     Boolean      @default(true)
  
  // Statistics
  viewerCount  Int          @default(0)
  peakViewers  Int          @default(0)
  totalViews   Int          @default(0)
  
  // Timestamps
  startedAt    DateTime?
  endedAt      DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations
  match        Match?       @relation(fields: [matchId], references: [id], onDelete: SetNull)
  organizer    User         @relation("StreamOrganizer", fields: [organizerId], references: [id])
  highlights   StreamHighlight[]
  
  @@map("streams")
}

model StreamHighlight {
  id          String   @id @default(cuid())
  streamId    String
  title       String
  description String?
  
  // Timing
  startTime   Int      // Seconds from stream start
  duration    Int      // Duration in seconds
  
  // Media
  thumbnailUrl String?
  videoUrl     String?
  
  // AI Detection
  confidence   Float?   // AI confidence in highlight detection
  tags         String[] // AI-generated tags
  
  createdAt   DateTime @default(now())
  
  stream      Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  
  @@map("stream_highlights")
}

// ===== DISCORD INTEGRATION =====

model DiscordBot {
  id           String  @id @default(cuid())
  tournamentId String  @unique
  guildId      String
  channelId    String?
  botToken     String?
  
  // Configuration
  config       Json    // Bot settings and commands
  isActive     Boolean @default(true)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  
  @@map("discord_bots")
}

// ===== PAYMENTS & TRANSACTIONS =====

model Payment {
  id                   String        @id @default(cuid())
  userId               String
  tournamentId         String?
  
  // Stripe Details
  stripePaymentIntentId String       @unique
  stripeChargeId       String?
  
  // Payment Info
  amount               Float
  currency             String        @default("usd")
  description          String?
  type                 PaymentType2
  
  // Status
  status               PaymentStatus @default(PENDING)
  failureReason        String?
  
  // Timestamps
  createdAt            DateTime      @default(now())
  completedAt          DateTime?
  
  // Relations
  user                 User          @relation("UserPayments", fields: [userId], references: [id])
  tournament           Tournament?   @relation("TournamentPayments", fields: [tournamentId], references: [id])
  refunds              Refund[]
  
  @@map("payments")
}

model Refund {
  id              String       @id @default(cuid())
  paymentId       String
  stripeRefundId  String       @unique
  
  amount          Float
  reason          String?
  status          RefundStatus @default(PENDING)
  
  createdAt       DateTime     @default(now())
  processedAt     DateTime?
  
  payment         Payment      @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  @@map("refunds")
}

model PrizePayment {
  id              String             @id @default(cuid())
  tournamentId    String
  userId          String
  position        Int                // 1st, 2nd, 3rd place
  
  amount          Float
  currency        String             @default("usd")
  stripeTransferId String?           @unique
  
  status          PrizePaymentStatus @default(PENDING)
  
  createdAt       DateTime           @default(now())
  paidAt          DateTime?
  
  tournament      Tournament         @relation("TournamentPrizes", fields: [tournamentId], references: [id])
  user            User               @relation("UserPrizes", fields: [userId], references: [id])
  
  @@unique([tournamentId, userId])
  @@map("prize_payments")
}

// ===== AUDIT & ANALYTICS =====

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // Action performed
  resource  String   // Resource affected
  resourceId String? // ID of affected resource
  oldValues Json?    // Previous values
  newValues Json?    // New values
  metadata  Json?    // Additional context
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("audit_logs")
}

// ===== ENUMS =====

enum UserRole {
  PLAYER
  ORGANIZER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum TeamRole {
  MEMBER
  CAPTAIN
  COACH
  MANAGER
}

enum Platform {
  PS5
  XBOX
  PC
  PS4
  XBOX_ONE
}

enum TournamentFormat {
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION
  ROUND_ROBIN
  SWISS
  LEAGUE
  CUSTOM
}

enum GameMode {
  ULTIMATE_TEAM
  KICK_OFF
  CAREER_MODE
  VOLTA_FOOTBALL
  PRO_CLUBS
}

enum TournamentStatus {
  DRAFT
  PUBLISHED
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  CHECK_IN
  LIVE
  COMPLETED
  CANCELLED
}

enum ParticipantStatus {
  REGISTERED
  CHECKED_IN
  DISQUALIFIED
  WITHDRAWN
  NO_SHOW
}

enum BracketType {
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION_WINNERS
  DOUBLE_ELIMINATION_LOSERS
  ROUND_ROBIN
  SWISS
  LEAGUE
}

enum MatchStatus {
  PENDING
  READY
  LIVE
  WAITING_RESULTS
  COMPLETED
  DISPUTED
  CANCELLED
  NO_SHOW
}

enum ResultStatus {
  PENDING
  VALIDATED
  DISPUTED
  REJECTED
  AUTO_VALIDATED
}

enum DisputeCategory {
  WRONG_RESULT
  NO_SHOW
  CHEATING
  TECHNICAL_ISSUE
  RULE_VIOLATION
  OTHER
}

enum DisputeStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED
  ESCALATED
  CLOSED
}

enum DisputePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ArbitrationDecision {
  APPROVE_ORIGINAL
  APPROVE_DISPUTE
  REMATCH
  DISQUALIFY_BOTH
  ESCALATE
}

enum NotificationType {
  TOURNAMENT_START
  MATCH_READY
  MATCH_RESULT
  REGISTRATION_OPEN
  REGISTRATION_CLOSING
  CHECK_IN_REQUIRED
  DISPUTE_FILED
  DISPUTE_RESOLVED
  PRIZE_AWARDED
  SYSTEM_MESSAGE
}

enum PaymentType {
  CARD
  PAYPAL
  BANK_TRANSFER
  CRYPTO
}

enum SubscriptionPlan {
  FREE
  PRO
  ORGANIZER
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
  INCOMPLETE
}

enum StreamStatus {
  OFFLINE
  STARTING
  LIVE
  ENDING
  COMPLETED
  ERROR
}

enum PaymentType2 {
  ENTRY_FEE
  SUBSCRIPTION
  PRIZE_POOL
  MERCHANDISE
  DONATION
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  DISPUTED
  REFUNDED
}

enum RefundStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PrizePaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  ON_HOLD
}